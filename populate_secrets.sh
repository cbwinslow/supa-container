#!/bin/bash

# -----------------------------------------------------------------------------
# Secure Secret Population Script for Supabase Super Stack
# -----------------------------------------------------------------------------
# This script automates the creation of the .env file by generating all
# necessary random secrets and passwords.
#
# It should be the FIRST script you run after configuring config.sh.
# -----------------------------------------------------------------------------

# Exit on error, undefined variable, and pipe failures
set -euo pipefail

# --- Source Configuration ---
if [ -f "config.sh" ]; then
  source config.sh
else
  echo "❌ ERROR: config.sh not found. Please create it before running this script."
  exit 1
fi

ENV_FILE=".env"

# --- Safety Check ---
if [ -f "$ENV_FILE" ]; then
  read -p "⚠️  A .env file already exists. Do you want to overwrite it with new secrets? (y/n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborted. Your existing .env file has not been changed."
    exit 1
  fi
fi

echo "--> Generating new secure secrets and creating .env file..."

# --- Generate Secrets ---
# Use openssl for cryptographically strong random strings
generate_secret() {
  openssl rand -hex 32
}

POSTGRES_PASSWORD=$(generate_secret)
NEO4J_PASSWORD=$(generate_secret)
N8N_BASIC_AUTH_PASSWORD=$(generate_secret)
FLOWISE_PASSWORD=$(generate_secret)
LANGFUSE_NEXTAUTH_SECRET=$(generate_secret)
LANGFUSE_SALT=$(generate_secret)
SUPABASE_JWT_SECRET=$(generate_secret)

# Generate a hashed password for Traefik basic auth
TRAEFIK_ADMIN_PASSWORD_HASH=$(htpasswd -nb admin "$TRAEFIK_ADMIN_PASSWORD")

# --- Create .env File ---
cat <<EOF > "$ENV_FILE"
# --- Production Environment Variables ---
# This file was generated by populate_secrets.sh

# --- Core Deployment Config ---
DOMAIN=${DOMAIN}
LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
TRAEFIK_ADMIN_PASSWORD_HASH=${TRAEFIK_ADMIN_PASSWORD_HASH}

# --- PostgreSQL (Supabase) ---
POSTGRES_USER=postgres
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_DB=postgres
DATABASE_URL=postgresql://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@supabase:5432/\${POSTGRES_DB}

# --- Neo4j (Knowledge Graph) ---
NEO4J_USER=neo4j
NEO4J_PASSWORD=${NEO4J_PASSWORD}
NEO4J_URI=bolt://neo4j:7687

# --- LLM & Embedding Providers (LocalAI) ---
LLM_PROVIDER=openai
LLM_BASE_URL=http://localai:8080/v1
LLM_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
LLM_CHOICE=gpt-4.1-mini

EMBEDDING_PROVIDER=openai
EMBEDDING_BASE_URL=http://localai:8080/v1
EMBEDDING_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
EMBEDDING_MODEL=text-embedding-3-small
VECTOR_DIMENSION=1536
INGESTION_LLM_CHOICE=gpt-4.1-nano

# --- n8n Workflow Automation ---
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}

# --- Flowise Prototyping UI ---
FLOWISE_USERNAME=admin
FLOWISE_PASSWORD=${FLOWISE_PASSWORD}

# --- Langfuse LLM Observability ---
LANGFUSE_NEXTAUTH_SECRET=${LANGFUSE_NEXTAUTH_SECRET}
LANGFUSE_SALT=${LANGFUSE_SALT}

# --- Supabase Auth ---
# IMPORTANT: These keys must be populated AFTER the first deployment.
# Run the post-deploy-setup.sh script to get these values.
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=
SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}

# --- Application Config ---
APP_ENV=production
LOG_LEVEL=INFO
APP_PORT=8058
EOF

echo "✅ .env file created successfully with newly generated secrets."
echo ""
echo "==================================================================="
echo " NEXT STEPS"
echo "==================================================================="
echo "The .env file is now ready for the main deployment."
echo ""
echo "1. Run the main deployment script:"
echo "   sudo bash deploy.sh"
echo ""
echo "2. After deployment, follow the instructions in the README to run the"
echo "   'post-deploy-setup.sh' script. It will give you the final two"
echo "   Supabase keys that you need to paste into your .env file."
echo "==================================================================="
